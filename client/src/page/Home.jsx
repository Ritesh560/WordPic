import React, { useContext, useEffect, useState } from "react"

import { Card, FormField, Loader } from "../components"
import { MessageContext } from "../lib/contexts/MessageContext"
import Header from "./Header"
import { BACKEND_URL } from "../../config"
import { Link, Navigate } from "react-router-dom"
import { useUser } from "../lib/data-access/src"

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  }

  return <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
}

const Home = ({ user, setUser }) => {
  const { fetchUser, fetchingUser } = useUser()
  const { addError } = useContext(MessageContext)

  const [loading, setLoading] = useState(false)
  const [allPosts, setAllPosts] = useState(null)

  const [searchText, setSearchText] = useState("")
  const [searchTimeout, setSearchTimeout] = useState(null)
  const [searchedResults, setSearchedResults] = useState(null)

  const fetchPosts = async () => {
    setLoading(true)

    try {
      const response = await fetch(`${BACKEND_URL}/api/v1/post`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })

      if (response.ok) {
        const result = await response.json()
        setAllPosts(result.data.reverse())
      }
    } catch (err) {
      addError(err)
    } finally {
      setLoading(false)
    }
  }

  const handleFetchUser = () => {
    fetchUser(
      {},
      {
        onSuccess: (res) => {
          setUser(res)
        },
        onError: (err) => {
          console.log(err)
        },
      }
    )
  }

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout)
    setSearchText(e.target.value)

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => (item.name || item.user_posted).toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()))
        setSearchedResults(searchResult)
      }, 500)
    )
  }

  const checkAccessToken = () => {
    const accessToken = localStorage.getItem("accessToken")
    if (!accessToken?.length) return false
    return true
  }

  useEffect(() => {
    if (Object.keys(user).length === 0) handleFetchUser()
    fetchPosts()
  }, [])

  return (
    <div>
      {checkAccessToken() ? (
        <div>
          <Header user={user} />
          <main className="sm:p-8 px-4 py-8 w-full min-h-[calc(100vh-73px)] wordPic_container">
            <section className="max-w-7xl mx-auto">
              <div className="flex justify-between align-center">
                <div>
                  <h1 className="font-extrabold text-[#222328] text-[32px]">Bring Your Words to Life with WordPic</h1>
                  <p className="mt-2 text-[#666e75] text-[14px] max-w-[80%]">Browse through a collection of imaginative and visually stunning images generated by AI</p>
                </div>
                <Link to="/create-post" className="h-10 w-25 font-inter font-medium bg-[#6469ff] text-white px-4 py-2 rounded-md">
                  Create
                </Link>
              </div>

              <div className="mt-16">
                <FormField labelName="Search posts" type="text" name="text" placeholder="Search something..." value={searchText} handleChange={handleSearchChange} />
              </div>

              <div className="mt-10">
                {loading ? (
                  <div className="flex justify-center items-center">
                    <Loader />
                  </div>
                ) : (
                  <>
                    {searchText && (
                      <h2 className="font-medium text-[#666e75] text-xl mb-3">
                        Showing Resuls for <span className="text-[#222328]">{searchText}</span>:
                      </h2>
                    )}
                    <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">{searchText ? <RenderCards data={searchedResults} title="No Search Results Found" /> : <RenderCards data={allPosts} title="No Posts Yet" />}</div>
                  </>
                )}
              </div>
            </section>
          </main>
        </div>
      ) : (
        <Navigate to="/login" />
      )}
    </div>
  )
}

export default Home
